import cv2 
import numpy as np
#########
rows=50
colms=20
correctans=0
wrongans=0
#        1  2  3  4  5  6  7  8  9  10
answers=[1, 2, 2, 1, 2, 3, 4, 3, 2, 4, # 1 
         1, 4, 1, 1, 2, 3, 2, 3, 2, 1, # 2
         1, 3, 4, 2, 2, 1, 3, 3, 2, 4, # 3
         1, 2, 4, 3, 3, 3, 1, 2, 2, 3, # 4
         3, 2, 1, 1, 1, 2, 4, 2, 3, 1, # 5
         1, 3, 2, 3, 1, 4, 2, 1, 1, 2, # 6
         2, 2, 2, 4, 1, 4, 3, 1, 2, 3, # 7
         3, 2, 1, 2, 1, 3, 1, 2, 4, 3, # 8
         2, 4, 4, 4, 3, 1, 1, 4, 2, 4, # 9
         3, 3, 2, 2, 2, 1, 3, 4, 2, 1, # 10
         4, 1, 3, 3, 4, 2, 4, 2, 3, 2, # 11
         2, 3, 2, 1, 2, 3, 1, 1, 1, 3, # 12
         1, 2, 2, 2, 2, 4, 4, 3, 4, 4, # 13
         2, 4, 1, 3, 4, 1, 3, 1, 1, 3, # 14
         1, 4, 2, 4, 3, 1, 2, 1, 3, 2, # 15
         3, 1, 2, 1, 2, 1, 2, 4, 1, 2, # 16
         3, 3, 4, 3, 1, 1, 1, 4, 2, 1, # 17
         4, 2, 1, 4, 1, 1, 2, 1, 3, 3, # 18
         2, 3, 2, 1, 4, 1, 4, 4, 2, 4, # 19
         1, 2, 4, 1, 2, 1, 2, 4, 3, 1,]# 20
#########


img = cv2.imread('sample omr(1).jpg')
img1=cv2.resize(img,(500,600))
#cv2.imshow('img',img1)
img2=img1.copy()
gray=cv2.cvtColor(img1,cv2.COLOR_BGR2GRAY)
imgThresh=cv2.threshold(gray,170,250,cv2.THRESH_BINARY_INV)[1]

def splitbox(img):
    rows=np.vsplit(img,50)
    boxes=[]
    for r in rows:
        cols=np.hsplit(r,20)
        for box in cols:
            boxes.append(box)
            #cv2.imshow('Boxes',box)
    return boxes

boxes=splitbox(imgThresh)
#cv2.imshow("test",boxes[781])
#print(cv2.countNonZero(boxes[1]),cv2.countNonZero(boxes[3]))#1==marked,3==unmarked


#Getting pixel values of each box
pixelValues=np.zeros((50,20))
countC=0
countR=0

for image in boxes:
    totalPixel=cv2.countNonZero(image)
    pixelValues[countR][countC]=totalPixel
    countC+=1
    if (countC==20):
        countR +=1
        countC=0
#print(pixelValues)   


#Arranging pixel values in a matrix
mypixelValues=np.zeros((200,5))#(200,5)
subarray1 = pixelValues[:50, :5]
subarray2 = pixelValues[:50, 5:10]
subarray3 = pixelValues[:50, 10:15]
subarray4 = pixelValues[:50, 15:20]
mypixelValues = np.concatenate((subarray1, subarray2, subarray3, subarray4))
#print(mypixelValues)

 

#Finding index values of markings(higest pixel value position i.e marked bubble)
myIndex=[]
for x in range(0,200):
    arr=mypixelValues[x]
    myIndexVal=np.where(arr==np.amax(arr))
    #print(myIndex[0])
    myIndex.append(myIndexVal[0][0])
#print(myIndex)

#GRADING
grading=[]
for x in range(0,200):
    
    if answers[x] == myIndex[x]:
        grading.append(4)
        correctans +=1
    #else:    
    if answers[x] != myIndex[x]:
        if(myIndex[x] == 0):
            grading.append(0) 
        else:    
            grading.append(-1) 
            wrongans +=1  
#print(grading)     




#SCORE
score=sum(grading) 
#print("score: ",score)
#print('correct:',correctans)
#print('wrong:  ', wrongans)

#RED AND GREEN BUBBLES                       
def bubbles(img2,myIndex,grading,answers):
    width  = int(img2.shape[1]//20)
    height = int(img2.shape[0]//50)
    #print(width,height)
    colour=0
    
    for i in range(0,50):
        myAnswer = myIndex[i]
        cX = (myAnswer*width)+width//2
        cY = (i*height)+height//2
    
        if(grading[i]==4):
            colour = (0,255,0)
        else:
            colour = (0,0,255)
        
        cv2.circle(img2,(cX,cY),7,colour,cv2.FILLED)
    
    
    for i in range(50,100):
        
        myAnswer = myIndex[i]
        cX = (myAnswer*width + 125)+width//2
        cY = ((i - 50)*height)+height//2
    
    
        if(grading[i]==4):
            colour = (0,255,0)
       
        if(grading[i]==0):
            colour = (225,0,0)
        
        else:
            colour = (0,0,255)
        
        cv2.circle(img2,(cX,cY),7,colour,cv2.FILLED)
      
    return img2
    




img2 = bubbles(img2,myIndex,grading,answers)


cv2.imshow('result',img2) 
              
    




cv2.waitKey(0)